@App:name("SiddhiApp")
@App:description("Description of the plan")


/*

 Purchase online*/

@source(type = 'http-service', receiver.url = 'http://0.0.0.0:7370/reserveTicket', source.id = 'reserveTicket',
	@map(type = 'json',
		@attributes(messageId = 'trp:messageId', time = '$.event.time', start = '$.event.start', eend = '$.event.end', num = '$.event.num', instanceID = '$.event.instanceID')
		)
	)
define stream reserveTicketStream (messageId string, time string, start string, eend string, num string, instanceID string);

@sink(type = 'http-service-response', http.status.code = '200', source.id = 'reserveTicket', message.id = '{{messageId}}',
	@map(type = 'json',
		@attributes(messageId = '{{messageId}}', order_number = '{{instanceID}}')
		)
	)
define stream CreateTicketorderStream (
 messageId string,
 order_number string
);

@source(type = 'http-service', receiver.url = 'http://0.0.0.0:7370/issue', source.id = 'issue',
	@map(type = 'json',
		@attributes(messageId = 'trp:messageId', order_number = '$.event.order_number', instanceID = '$.event.instanceID')
		)
	)
define stream issueTicketStream (messageId string, order_number string, instanceID string);

@sink(type = 'http-service-response', http.status.code = '200', source.id = 'issue', message.id = '{{messageId}}',
	@map(type = 'json',
		@attributes(messageId = '{{messageId}}', order_number = '{{instanceID}}')
		)
	)
define stream issueTicketstatusStream (
 messageId string,
 order_number string
);

define table TicketReservationTable (
 time string,
 start string,
 eend string,
 num string,
 instanceID string,
 status string
);

@info(name = 'insert into TicketReservationTable')
from reserveTicketStream
insert into TicketReservationTable
select time, start,eend, num, instanceID, 'pending' as status;

@info(name = 'update TicketReservationTable')
from issueTicketStream
update TicketReservationTable
	on TicketReservationTable.instanceID == issueTicketStream.instanceID
set status = 'completed';

/*

 Bank */

@source(type = 'http-service', receiver.url = "http://0.0.0.0:7370/bank", source.id = "bank", 
	@map(type = 'json', 
		@attributes(order_number = "$.event.order_number", messageId = "trp:messageId", instanceID = "$.event.instanceID")))
define stream requestpayment(order_number string, instanceID string, messageId string);

@sink(type = 'http-service-response', source.id = "bank", message.id = "{{messageId}}", 
	@map(type = 'json'))
@sink(
	type = 'http',
	publisher.url = 'http://camunda:8080/engine-rest/message',
	headers = "'Host:camunda:8080", 
	method = 'POST',
	@map(
		type = 'json',
		@payload("""{"messageName": "payment_complete", "processInstanceId": "{{instanceID}}"}""")))
@sink(type = 'log',
	@map(
		type = 'json', 
		@payload("""{"messageName": "payment_complete", "processInstanceId": "{{instanceID}}"}""")))
define stream paymentResponseStream (messageId string, messageName string, instanceID string);

