@App:name("TrainDelay")
@App:description("Description of the plan")

@sink(
	type = 'http-request',
	sink.id = 'Message',
	publisher.url = 'http://camunda:8080/engine-rest/message',
	headers = "'Host:camunda:8080", 
	method = 'POST',
	on.error = 'log',
	@map(
		type = 'json',
		@payload(
		    """{
                "messageName": "{{messageName}}",
                "processVariables": {
                    "trainID": {
                        "value": "{{trainID}}",
                        "type": "String"
                    },
                    "delay": {
                        "value": {{delay}},
                        "type": "Integer"
                    }
                }
            }""")))
@sink(
    type = 'log',
    @map(
		type = 'json',
		@payload(
		    """{
                "messageName": "{{messageName}}",
                "processVariables": {
                    "trainID": {
                        "value": "{{trainID}}",
                        "type": "String"
                    },
                    "delay": {
                        "value": {{delay}},
                        "type": "Integer"
                    }
                }
            }""")))
define stream MessageStream(messageName string, trainID string, delay int);


@source(
    type = 'http-service', 
    source.id = 'arrange-replacement-buses',
    receiver.url = "http://0.0.0.0:7370/arrange-replacement-buses", 
	@map(
	    type = 'json',
	    @payload(
	        """{
	            "trainID": "{{trainID}}", 
	            "numberOfBuses": "{{numberOfBuses}}", 
	            "instanceID": "{{instanceID}}"
	       }""")))
@sink(
    type='log',
    @map(
	    type = 'json',
	    @payload(
	        """{
	            "trainID": "{{trainID}}", 
	            "numberOfBuses": "{{numberOfBuses}}", 
	            "instanceID": "{{instanceID}}"
	       }""")))
define stream ArrangeReplacementBusesStream(trainID string, numberOfBuses string, instanceID string);


@source(
    type = 'http-service', 
    source.id = 'cancel-replacement-buses',
    receiver.url = "http://0.0.0.0:7370/cancel-replacement-buses", 
	@map(
	    type = 'json',
	    @payload(
	        """{
	            "trainID": "{{trainID}}", 
	            "instanceID": "{{instanceID}}"
	       }""")))
@sink(
    type='log',
    @map(
	    type = 'json',
	    @payload(
	        """{
	            "trainID": "{{trainID}}", 
	            "instanceID": "{{instanceID}}"
	       }""")))
define stream CancelReplacementBusesStream(trainID string, instanceID string);


@source(
    type = 'http-service', 
    source.id = 'information',
    receiver.url = "http://0.0.0.0:7370/information", 
	@map(
	    type = 'json',
	    @payload(
	        """{
	            "instanceID": "{{instanceID}}",
	            "message": "{{message}}"
	       }""")))
@sink(
    type='log',
    @map(
	    type = 'json',
	    @payload(
	        """{
	            "instanceID": "{{instanceID}}",
	            "message": "{{message}}"
	       }""")))
define stream InformationStream(instanceID string, message string);


define table replacementBusesDB(id string, trainID string);
define table informationDB(date string, message string);


-- Arrange replacement buses
@info(name = 'ArrangeReplacementBuses')
from ArrangeReplacementBusesStream
select '1' as id, trainID
insert into replacementBusesDB;

-- Cancel replacement buses
@info(name = 'CancelReplacementBuses')
from CancelReplacementBusesStream
delete replacementBusesDB 
on replacementBusesDB.trainID == trainID;

-- Inform customers
@info(name = 'Inform')
from InformationStream
select 'now' as date, message
insert into informationDB;

